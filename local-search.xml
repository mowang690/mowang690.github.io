<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用方法记录</title>
    <link href="/2023/02/14/stream%20groupby/"/>
    <url>/2023/02/14/stream%20groupby/</url>
    
    <content type="html"><![CDATA[<h3 id="stream-groupby用法"><a href="#stream-groupby用法" class="headerlink" title="stream groupby用法"></a>stream groupby用法</h3><pre><code class="hljs">//aMap&lt;Long,List&lt;Long&gt;&gt; exhibitionPitemMap = list.stream().collect(Collectors.groupingBy(TestDTO1::getLevle1CategoryId, Collectors.mapping(TestDTO1::getPitemId, Collectors.toList())));//bMap&lt;Long, List&lt;TestDTO2&gt;&gt; categoryPitemMap = list.stream().collect(Collectors.groupingBy(TestDTO2::getLevle1CategoryId));</code></pre><h3 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h3><pre><code class="hljs">map.forEach((key,value) -&gt; &#123;&#125;)</code></pre><h3 id="两个时间求月差"><a href="#两个时间求月差" class="headerlink" title="两个时间求月差"></a>两个时间求月差</h3><pre><code class="hljs">LocalDate one = LocalDate.of(xxxx,xx,xx);LocalDate two = LocalDate.of(xxxx,xx,xx);//年差int year = two.getYear() - one.getYear();//月差int month = year*12 + two.getMonthValue - one.getMonthValue</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PotPlayer</title>
    <link href="/2022/11/11/potplayer/"/>
    <url>/2022/11/11/potplayer/</url>
    
    <content type="html"><![CDATA[<p><a href="../PotPlayerSetup64.exe">PotPlayer下载</a> <a href="https://potplayer.daum.net/">PotPlayer官网地址</a> </p><p><img src="/../pictures/potplayer.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频播放软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos下试安装ELK</title>
    <link href="/2022/11/11/ELK%20install/"/>
    <url>/2022/11/11/ELK%20install/</url>
    
    <content type="html"><![CDATA[<h2 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h2><h3 id="一、安装-amp-配置Elasticsearch"><a href="#一、安装-amp-配置Elasticsearch" class="headerlink" title="一、安装&amp;配置Elasticsearch"></a>一、安装&amp;配置Elasticsearch</h3><h4 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1 下载安装包"></a>1.1 下载安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>elasticsearch/elasticsearch-<span class="hljs-number">7.10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh elasticsearch-<span class="hljs-number">7</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="1-3-修改配置文件"><a href="#1-3-修改配置文件" class="headerlink" title="1.3 修改配置文件"></a>1.3 修改配置文件</h4><p>文件地址：&#x2F;etc&#x2F;elasticsearch&#x2F;elasticsearch.yml</p><p>单节点配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">elk</span><br><span class="hljs-attr">path.data:</span> <span class="hljs-string">/var/lib/elasticsearch</span><br><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/var/log/elasticsearch</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">discovery.type:</span> <span class="hljs-string">single-node</span><br></code></pre></td></tr></table></figure><h4 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4 启动"></a>1.4 启动</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl enable elasticsearch<br><span class="hljs-params">system</span>ctl start elasticsearch<br></code></pre></td></tr></table></figure><h3 id="二、安装-amp-配置Kibana"><a href="#二、安装-amp-配置Kibana" class="headerlink" title="二、安装&amp;配置Kibana"></a>二、安装&amp;配置Kibana</h3><h4 id="2-1-下载安装包"><a href="#2-1-下载安装包" class="headerlink" title="2.1 下载安装包"></a>2.1 下载安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>kibana/kibana-<span class="hljs-number">7.10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh kibana-<span class="hljs-number">7</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="2-3-修改配置文件"><a href="#2-3-修改配置文件" class="headerlink" title="2.3 修改配置文件"></a>2.3 修改配置文件</h4><p>文件地址：&#x2F;etc&#x2F;kibana&#x2F;Kibana.yml</p><p>配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">server<span class="hljs-selector-class">.host</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>i18n<span class="hljs-selector-class">.locale</span>: <span class="hljs-string">&quot;zh-CN&quot;</span><br>elasticsearch<span class="hljs-selector-class">.hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;http://localhost:9200&quot;</span>]</span><br></code></pre></td></tr></table></figure><h4 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4 启动"></a>2.4 启动</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl enable kibana  <br><span class="hljs-params">system</span>ctl start kibana<br></code></pre></td></tr></table></figure><h3 id="三、安装-amp-配置logstatsh"><a href="#三、安装-amp-配置logstatsh" class="headerlink" title="三、安装&amp;配置logstatsh"></a>三、安装&amp;配置logstatsh</h3><h4 id="3-1-下载安装包"><a href="#3-1-下载安装包" class="headerlink" title="3.1 下载安装包"></a>3.1 下载安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>logstash/logstash-<span class="hljs-number">7.10</span>.<span class="hljs-number">1</span>.rpm<br></code></pre></td></tr></table></figure><h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -vih logstash-<span class="hljs-number">7</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>.rpm<br></code></pre></td></tr></table></figure><h4 id="3-3-修改配置文件"><a href="#3-3-修改配置文件" class="headerlink" title="3.3 修改配置文件"></a>3.3 修改配置文件</h4><p>文件地址：&#x2F;etc&#x2F;logstash&#x2F;logstash.yml</p><p>配置如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">path.data: <span class="hljs-regexp">/var/</span>lib/logstash  <br>pipeline.ordered: auto  <br>path.logs: <span class="hljs-regexp">/var/</span><span class="hljs-built_in">log</span>/logstash<br></code></pre></td></tr></table></figure><h4 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4 启动"></a>3.4 启动</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl enable logstash  <br><span class="hljs-params">system</span>ctl start logstash<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以收集nginx日志为例，在nginx所在服务器安装filebeat</p><h3 id="一、安装-amp-配置filebeat"><a href="#一、安装-amp-配置filebeat" class="headerlink" title="一、安装&amp;配置filebeat"></a>一、安装&amp;配置filebeat</h3><h4 id="1-1-下载安装包-1"><a href="#1-1-下载安装包-1" class="headerlink" title="1.1 下载安装包"></a>1.1 下载安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>filebeat/filebeat-<span class="hljs-number">7.10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="1-2-安装-1"><a href="#1-2-安装-1" class="headerlink" title="1.2 安装"></a>1.2 安装</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh filebeat-<span class="hljs-number">7</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>-x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="1-3-修改配置文件-1"><a href="#1-3-修改配置文件-1" class="headerlink" title="1.3 修改配置文件"></a>1.3 修改配置文件</h4><p>文件地址：&#x2F;etc&#x2F;filebeat&#x2F;filebeat.yml</p><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.inputs:</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span>  <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">paths:</span> [<span class="hljs-string">&quot;/var/log/nginx/access.log&quot;</span>]  <br><span class="hljs-attr">tags:</span> [<span class="hljs-string">&quot;tomcat-nginx-access001&quot;</span>]  <br><span class="hljs-attr">fields:</span>  <br><span class="hljs-attr">index:</span> <span class="hljs-string">&#x27;tomcat-nginx-access001&#x27;</span>  <br>   <br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">filestream</span>  <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <br><span class="hljs-attr">paths:</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/*.log</span>  <br><span class="hljs-attr">setup.ilm.overwrite:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">filebeat.config.modules:</span>  <br><span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;path.config&#125;/modules.d/*.yml</span>  <br><span class="hljs-attr">reload.enabled:</span> <span class="hljs-literal">false</span>  <br><span class="hljs-attr">setup.template.settings:</span>  <br><span class="hljs-attr">index.number_of_shards:</span> <span class="hljs-number">1</span>  <br><span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">&quot;tomcat&quot;</span>  <br><span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">&quot;tomcat-*&quot;</span>  <br><span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">setup.template.enabled:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">setup.kibana:</span>  <br><span class="hljs-attr">host:</span> <span class="hljs-string">&quot;安装kibana服务器地址:5601&quot;</span>  <br><span class="hljs-attr">output.logstash:</span>  <br><span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;安装logstash服务器地址:5044&quot;</span>]  <br><span class="hljs-attr">processors:</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">add_host_metadata:</span>  <br><span class="hljs-attr">when.not.contains.tags:</span> <span class="hljs-string">forwarded</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">add_cloud_metadata:</span> <span class="hljs-string">~</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">add_docker_metadata:</span> <span class="hljs-string">~</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">add_kubernetes_metadata:</span> <span class="hljs-string">~</span><br></code></pre></td></tr></table></figure><h4 id="1-4-运行命令"><a href="#1-4-运行命令" class="headerlink" title="1.4 运行命令"></a>1.4 运行命令</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">filebeat modules <span class="hljs-built_in">enable</span> nginx<br></code></pre></td></tr></table></figure><h4 id="1-5-修改配置文件"><a href="#1-5-修改配置文件" class="headerlink" title="1.5 修改配置文件"></a>1.5 修改配置文件</h4><p>文件地址：&#x2F;etc&#x2F;filebeat&#x2F;modules.d&#x2F;nginx.yml</p><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Module: nginx  </span><br><span class="hljs-comment"># Docs: https://www.elastic.co/guide/en/beats/filebeat/7.10/filebeat-module-#nginx.html  </span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-attr">module:</span> <span class="hljs-string">nginx</span>  <br><span class="hljs-comment"># Access logs  </span><br><span class="hljs-attr">access:</span>  <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-comment"># Set custom paths for the log files. If left empty,  </span><br> <span class="hljs-comment"># Filebeat will choose the paths depending on your OS.  </span><br><span class="hljs-attr">var.paths:</span> [<span class="hljs-string">&quot;/var/log/nginx/access.log&quot;</span>]  <br><span class="hljs-comment"># Error logs  </span><br><span class="hljs-attr">error:</span>  <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <br>  <br><span class="hljs-comment"># Set custom paths for the log files. If left empty,  </span><br><span class="hljs-comment"># Filebeat will choose the paths depending on your OS.  </span><br><span class="hljs-comment"># Ingress-nginx controller logs. This is disabled by default. It could be used #in Kubernetes environments to parse ingress-nginx logs  </span><br><span class="hljs-attr">ingress_controller:</span>  <br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <br>  <br><span class="hljs-comment"># Set custom paths for the log files. If left empty,  </span><br><span class="hljs-comment"># Filebeat will choose the paths depending on your OS.  </span><br><span class="hljs-comment">#var.paths:</span><br></code></pre></td></tr></table></figure><h4 id="1-6-修改nginx日志格式"><a href="#1-6-修改nginx日志格式" class="headerlink" title="1.6 修改nginx日志格式"></a>1.6 修改nginx日志格式</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs julia">log_format  main  &#x27;&#123;<span class="hljs-string">&quot;@timestamp&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$time_iso8601</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;server_addr&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$server_addr</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;remote_addr&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$remote_addr</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;request_method&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$request_method</span>&quot;</span>,&#x27;  <br>        &#x27;<span class="hljs-string">&quot;uri&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$uri</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;upstream_response_time&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$upstream_response_time</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;request_uri&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$request_uri</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;request_time&quot;</span>:$request_time,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$status</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;http_referer&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;http_x_forwarded_for&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;</span>,&#x27;  <br>            &#x27;<span class="hljs-string">&quot;http_user_agent&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span>&#x27;  <br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;  <br>  <br>   access_log  /var/log/nginx/access.log  main;<br></code></pre></td></tr></table></figure><h4 id="1-7-在logstash服务器新建配置"><a href="#1-7-在logstash服务器新建配置" class="headerlink" title="1.7 在logstash服务器新建配置"></a>1.7 在logstash服务器新建配置</h4><p>&#x2F;etc&#x2F;logstash&#x2F;conf.d&#x2F;目录中新建logstash.conf</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs puppet">input&#123;  <br>    <span class="hljs-keyword">beats</span> &#123;  <br>        <span class="hljs-attr">port</span> =&gt; <span class="hljs-string">&quot;5044&quot;</span>  <br>        <span class="hljs-attr">codec</span> =&gt; <span class="hljs-string">&quot;json&quot;</span>  <br>    &#125;  <br>&#125;  <br><span class="hljs-keyword">filter</span> &#123;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;tomcat-nginx-access001&quot;</span> <span class="hljs-keyword">in</span> [tags] &#123;  <br>        json &#123;  <br>            <span class="hljs-attr">source</span> =&gt; <span class="hljs-string">&quot;message&quot;</span>  <br>            <span class="hljs-attr">target</span> =&gt; <span class="hljs-string">&quot;msg_json&quot;</span>  <br>       &#125;  <br>   &#125;  <br>&#125;  <br><span class="hljs-keyword">output</span> &#123;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;tomcat-nginx-access001&quot;</span> <span class="hljs-keyword">in</span> [tags]&#123;  <br>        elasticsearch &#123;  <br>            <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;localhost:9200&quot;</span>]  <br>            <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;nginx-access001&quot;</span>  <br> &#125;           <br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-8-重新启动logstash"><a href="#1-8-重新启动logstash" class="headerlink" title="1.8 重新启动logstash"></a>1.8 重新启动logstash</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl restart logstash  <br><span class="hljs-params">system</span>ctl enable filebeat  <br><span class="hljs-params">system</span>ctl start filebeat<br></code></pre></td></tr></table></figure><h3 id="二、配置elasticsearch、kibana"><a href="#二、配置elasticsearch、kibana" class="headerlink" title="二、配置elasticsearch、kibana"></a>二、配置elasticsearch、kibana</h3><h4 id="2-1-使用elasticsearch-head插件新建别名"><a href="#2-1-使用elasticsearch-head插件新建别名" class="headerlink" title="2.1 使用elasticsearch-head插件新建别名"></a>2.1 使用elasticsearch-head插件新建别名</h4><p><img src="/../pictures/alias.png">  <img src="/../pictures/alias_success.png"></p><h4 id="2-2-使用Kibana"><a href="#2-2-使用Kibana" class="headerlink" title="2.2 使用Kibana"></a>2.2 使用Kibana</h4><h6 id="2-2-1-访问Kibana服务地址"><a href="#2-2-1-访问Kibana服务地址" class="headerlink" title="2.2.1 访问Kibana服务地址"></a>2.2.1 访问Kibana服务地址</h6><p><img src="/../pictures/kibana.png"></p><h6 id="2-2-2-选择Stack-Management"><a href="#2-2-2-选择Stack-Management" class="headerlink" title="2.2.2 选择Stack Management"></a>2.2.2 选择Stack Management</h6><p><img src="/../pictures/stack.png"></p><h6 id="2-2-3-新建索引策略nginx-配置默认即可"><a href="#2-2-3-新建索引策略nginx-配置默认即可" class="headerlink" title="2.2.3 新建索引策略nginx,配置默认即可"></a>2.2.3 新建索引策略nginx,配置默认即可</h6><p><img src="/../pictures/index_nginx.png"></p><h6 id="2-2-4-点击索引管理，给索引添加生命周期策略"><a href="#2-2-4-点击索引管理，给索引添加生命周期策略" class="headerlink" title="2.2.4  点击索引管理，给索引添加生命周期策略"></a>2.2.4  点击索引管理，给索引添加生命周期策略</h6><p><img src="/../pictures/index_life.png"></p><h6 id="2-2-5-创建索引模式，并将模式指向索引"><a href="#2-2-5-创建索引模式，并将模式指向索引" class="headerlink" title="2.2.5 创建索引模式，并将模式指向索引"></a>2.2.5 创建索引模式，并将模式指向索引</h6><p><img src="/../pictures/index_style.png"></p><p><img src="/../pictures/index_style2.png"></p><h6 id="2-2-6-创建完成返回Home-选择Kinaba仪表板，创建新的仪表板"><a href="#2-2-6-创建完成返回Home-选择Kinaba仪表板，创建新的仪表板" class="headerlink" title="2.2.6 创建完成返回Home,选择Kinaba仪表板，创建新的仪表板"></a>2.2.6 创建完成返回Home,选择Kinaba仪表板，创建新的仪表板</h6><p><img src="/../pictures/new_dash.png"></p><p><img src="/../pictures/new_dash_see.png"></p><h6 id="2-2-7-通过选择X轴y轴数据，Kinaba自动形成图表"><a href="#2-2-7-通过选择X轴y轴数据，Kinaba自动形成图表" class="headerlink" title="2.2.7 通过选择X轴y轴数据，Kinaba自动形成图表"></a>2.2.7 通过选择X轴y轴数据，Kinaba自动形成图表</h6><p><img src="/../pictures/dash.png"></p><p><img src="/../pictures/dash2.png"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻墙软件clash</title>
    <link href="/2022/11/11/application/"/>
    <url>/2022/11/11/application/</url>
    
    <content type="html"><![CDATA[<p><a href="../Clash.for.Windows.Setup.0.20.7.exe">clash下载</a> <a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">clash github地址</a> <a href="https://youyun9.com/auth/login">自用套餐地址</a></p><p><img src="/../pictures/clash.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>翻墙软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EXCEL导入模板</title>
    <link href="/2022/11/09/javaExcelImport/"/>
    <url>/2022/11/09/javaExcelImport/</url>
    
    <content type="html"><![CDATA[<pre><code class="java">import cn.hutool.core.io.IoUtil;import cn.hutool.poi.excel.ExcelUtil;import cn.hutool.poi.excel.ExcelWriter;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.poifs.filesystem.POIFSFileSystem;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;public class ExcelHelper &#123;    /**     * 将excel解析为指定的对象集合 &lt;br&gt;     * 例如： 要导入的excel格式为 &lt;br&gt;     * 第1行：  | id   | username | password　|(与对象的字段对应)&lt;br&gt;     * 第2行：  |1     | 小周　　 | 123456    |&lt;br&gt;     * 第3行：  |2     | 老王　　 | 123456    |&lt;br&gt;     * 调用： analysisExcel(file,User.class);     * @param file-----要解析的excel文件     * @param c--------指定的对象类型     * @throws IOException     * @return---------对象集合     */    public static &lt;T&gt; List&lt;T&gt; analysisExcel(File file,Class&lt;T&gt; c) &#123;        List&lt;T&gt; list = new ArrayList&lt;T&gt;();        InputStream inputStream = null;        String fileName = null;        Workbook wb = null;        try&#123;            inputStream = new FileInputStream(file);            fileName = file.getName();            if(fileName.endsWith(&quot;.xls&quot;) || fileName.endsWith(&quot;.xlsx&quot;))&#123;                //如果是2003版本                if(fileName.endsWith(&quot;.xls&quot;))&#123;                    //1.先解析文件                    POIFSFileSystem fs = new POIFSFileSystem(inputStream);                    wb = new HSSFWorkbook(fs);                &#125;else if( fileName.endsWith(&quot;.xlsx&quot;))&#123;//如果是2007以上版本                    wb = new XSSFWorkbook(inputStream);                &#125;else&#123;                    return null;                &#125;            &#125;        &#125;catch(IOException e)&#123;            e.printStackTrace();        &#125;        Sheet sheet = wb.getSheetAt(0);        //获取第一行（标题行）        Row row1 = sheet.getRow(0);        //总列数        int colNum = row1.getPhysicalNumberOfCells();        //总行数        int rowNum = sheet.getLastRowNum();        //将标题行一一放入数组        String[] titles = new String[colNum];        for(int i = 0 ; i &lt; colNum ; i++)&#123;            titles[i] = row1.getCell(i).getStringCellValue();        &#125;        //获取指定对象所有的字段        Field fields[] = c.getDeclaredFields();        Map&lt;String,Field&gt; fieldMap = new HashMap&lt;String, Field&gt;();        for (int i = 0; i &lt; fields.length; i++) &#123;            fieldMap.put(fields[i].getName(), fields[i]);        &#125;        //使用反射机制，将值存入对应对象中        try &#123;            for (int i = 1; i &lt; rowNum+1; i++) &#123;                T t =c.newInstance();                for (int j = 0; j &lt; titles.length; j++) &#123;                    //当excel中有这个字段                    if(fieldMap.containsKey(titles[j]))&#123;                        String fieldName = titles[j];                        String methodName = &quot;set&quot; + fieldName.substring(0,1).toUpperCase()+fieldName.substring(1);                        //调用该字段对应的set方法                        Class cc = fieldMap.get(titles[j]).getType();                        Method method = c.getMethod(methodName, cc);                        String value = String.valueOf(sheet.getRow(i).getCell(j));                        method.invoke(t, parseValue(value, cc));                    &#125;                &#125;                list.add(t);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        return list;    &#125;    /**     * 将字符串转化为指定类型的对象     * @param s----要转化的字符串     * @param c----目标对象类型     * @return     */    private static Object parseValue(String s,Class c)&#123;        Object obj = null;        String className = c.getName();        //excel中的数字解析之后可能末尾会有.0，需要去除        if(s.endsWith(&quot;.0&quot;)) s = s.substring(0, s.length()-2);        if(className.equals(&quot;java.lang.Integer&quot;))&#123; //Integer            obj =  new Integer(s);        &#125;else if(className.equals(&quot;int&quot;))&#123; //int            obj = (int)Integer.parseInt(s);        &#125;else if(className.equals(&quot;java.lang.String&quot;))&#123; //String            obj = s;        &#125;else if(className.equals(&quot;java.lang.Double&quot;))&#123; //Double            obj = new Double(s);        &#125;else if(className.equals(&quot;double&quot;))&#123; //double            obj = (double)new Double(s);        &#125;else if(className.equals(&quot;java.lang.Float&quot;))&#123; //Float            obj = new Float(s);        &#125;else if(className.equals(&quot;float&quot;))&#123; //float            obj = (float)new Float(s);        &#125;else if(className.equals(&quot;java.util.Date&quot;))&#123; //Date            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);            try &#123;                obj = sdf.parse(s);            &#125; catch (ParseException e) &#123;                e.printStackTrace();            &#125;        &#125;else if(className.equals(&quot;long&quot;))&#123; //long            obj = Long.parseLong(s);        &#125;else if(className.equals(&quot;java.util.Long&quot;))&#123; //Long            obj = new Long(s);        &#125;        return obj;    &#125;    public static void excelMap(List list , HttpServletResponse response , LinkedHashMap&lt;String ,String&gt; map,String fileName) throws Exception&#123;        // 通过工具类创建writer，默认创建xls格式        ExcelWriter writer = ExcelUtil.getWriter();        for (Map.Entry&lt;String, String&gt; entry :  map.entrySet()) &#123;            writer.addHeaderAlias(entry.getKey() , entry.getValue() );        &#125;        // 一次性写出内容，使用默认样式，强制输出标题        writer.write(list,true);        //response为HttpServletResponse对象        response.setContentType(&quot;application/vnd.ms-excel;charset=utf-8&quot;);        //test.xls是弹出下载对话框的文件名，不能为中文，中文请自行编码        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName);        ServletOutputStream out = response.getOutputStream();        writer.flush(out);        // 关闭writer，释放内存        writer.close();        //此处记得关闭输出Servlet流        IoUtil.close(out);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建树</title>
    <link href="/2022/11/09/javaTreeBuild/"/>
    <url>/2022/11/09/javaTreeBuild/</url>
    
    <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static List&lt;TreeObject&gt; build<span class="hljs-constructor">Tree(List&lt;TreeObject&gt; <span class="hljs-params">nodes</span>)</span> &#123;<br>        Map&lt;String, List&lt;TreeObject&gt;&gt; sub = nodes.stream<span class="hljs-literal">()</span>.filter(node -&gt; !<span class="hljs-string">&quot;D001&quot;</span>.equals(node.get<span class="hljs-constructor">DeptCode()</span>)).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span>grouping<span class="hljs-constructor">By(<span class="hljs-params">node</span> -&gt; <span class="hljs-params">node</span>.<span class="hljs-params">getParentDeptId</span>()</span>));<br>        nodes.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">node</span> -&gt; <span class="hljs-params">node</span>.<span class="hljs-params">setChildren</span>(<span class="hljs-params">sub</span>.<span class="hljs-params">get</span>(<span class="hljs-params">node</span>.<span class="hljs-params">getId</span>()</span>)));<br>        return nodes.stream<span class="hljs-literal">()</span>.filter(node -&gt; <span class="hljs-string">&quot;D001&quot;</span>.equals(node.get<span class="hljs-constructor">DeptCode()</span>)).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试总结</title>
    <link href="/2022/11/09/spring_init/"/>
    <url>/2022/11/09/spring_init/</url>
    
    <content type="html"><![CDATA[<h3 id="spring初始化过程口语化表达"><a href="#spring初始化过程口语化表达" class="headerlink" title="spring初始化过程口语化表达"></a>spring初始化过程口语化表达</h3><ol><li>AbstractApplicationContext.refresh()方法</li><li>通过obtainFreshBeanFactory()方法获取一个beanFactory,在该方法内，spring会创建一个新的beanFactory并通过loadBeanDefinitions()方法加载并解析bean，将bean封装成BeanDefinitions</li><li>之后spring会通过invokeBeanFactoryPostProcessors（）方法调用beanFactory的后置处理器</li><li>接着通过registerBeanPostProcessors（）方法加载bean的后置处理器，只不过bean的后置处理器现在不会触发，等到bean的初始化前后才会触发</li><li>然后spring会通过finishBeanFactoryInitialization（）实例化所有剩余的bean的实例</li><li>最后通过finishRefresh（）方法完成容器刷新<span id="more"></span></li></ol><h3 id="spring-bean生命周期"><a href="#spring-bean生命周期" class="headerlink" title="spring bean生命周期"></a>spring bean生命周期</h3><ol><li>首先是实例化bean对象，通过createBeanInstance()方法反射获取bean的构造方法进行实例化</li><li>之后调用polulateBean()方法进行属性填充</li><li>然后调用initializeBean()进行初始化，其中会先调用invokeAwareMethods（）方法判断bean是否实现beanNameAware,beanClassLoaderAware,BeanFactoryAware之类的接口，如果实现了就将其加载进来</li><li>之后会调用applyBeanPostProcessorsBeforeInitialization（）进行初始化的前置处理</li><li>之后会调用invokeInitMethods（）方法进行初始化，该方法中会判断bean有没有实现InitializingBean接口，如果有就通过afterPropertiesSet（）方法设置，</li><li>如果使用xml的话，会调用init-method方法进行初始化 </li><li>接着spring会调用applyBeanPostProcessorsAfterInitialization（）方法完成初始化的后置处理，aop就发生在该阶段</li><li>初始化之后就可以正常使用</li><li>进入销毁阶段后，spring会判断bean有没有disposableBean接口，有就调用其destroy()方法，如果bean配置了自定义的destroy-method,最后也会调用自定义的destroy-method方法</li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取一定时间间隔的日期</title>
    <link href="/2022/11/09/timeSplite/"/>
    <url>/2022/11/09/timeSplite/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">import cn.hutool.core.collection.CollectionUtil;import java.text.SimpleDateFormat;import java.time.ZoneId;import java.util.*;public class SplitDateUtil &#123;    private static final SimpleDateFormat monthDateFormat = new SimpleDateFormat(&quot;MM&quot;);    //将时间段按星期分割    public static List&lt;Range&gt; splitToWeeks(Date start, Date end) &#123;        List&lt;Range&gt; result = new ArrayList&lt;&gt;();        result.add(Range.create(start.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));        Date from = new Date(start.getTime() + 7L * 24 * 3600 * 1000);        Date weekEnd = cn.hutool.core.date.DateUtil.endOfWeek(end);        while (from.compareTo(weekEnd) &lt;= 0) &#123;            Date dt = cn.hutool.core.date.DateUtil.beginOfWeek(from);            CollectionUtil.getLast(result).end(new Date(dt.getTime() - 24L * 3600 * 1000).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());            CollectionUtil.getLast(result).setMonth(monthDateFormat.format(new Date(dt.getTime() - 24L * 3600 * 1000)));            result.add(Range.create(dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));            from.setTime(from.getTime() + 7L * 24 * 3600 * 1000);        &#125;        CollectionUtil.getLast(result).end(end.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());        CollectionUtil.getLast(result).setMonth(monthDateFormat.format(end));        return result;    &#125;    //将时间段按照月分割    public static List&lt;Range&gt; splitToMonths(Date start, Date end) &#123;        List&lt;Range&gt; result = new ArrayList&lt;&gt;();        result.add(Range.create(start.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));        Calendar cal = Calendar.getInstance();        cal.setTime(start);        cal.add(Calendar.MONTH, 1);        Date monthEnd = cn.hutool.core.date.DateUtil.endOfMonth(end);        while (cal.getTimeInMillis() &lt;= monthEnd.getTime()) &#123;            Date dt = cn.hutool.core.date.DateUtil.beginOfMonth(cal.getTime());            CollectionUtil.getLast(result).end(new Date(dt.getTime() - 24L * 3600 * 1000).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());            CollectionUtil.getLast(result).setMonth(monthDateFormat.format(new Date(dt.getTime() - 24L * 3600 * 1000)));            result.add(Range.create(dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));            cal.add(Calendar.MONTH, 1);        &#125;        CollectionUtil.getLast(result).end(end.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());        CollectionUtil.getLast(result).setMonth(monthDateFormat.format(end));        return result;    &#125;    //将时间段按照季度分割    public static List&lt;Range&gt; splitToQuarts(Date start, Date end) &#123;        List&lt;Range&gt; result = new ArrayList&lt;&gt;();        result.add(Range.create(start.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));        Calendar cal = Calendar.getInstance();        cal.setTime(start);        cal.add(Calendar.MONTH, 3);        Date quartEnd = cn.hutool.core.date.DateUtil.endOfQuarter(end);        while (cal.getTimeInMillis() &lt;= quartEnd.getTime()) &#123;            Date dt = cn.hutool.core.date.DateUtil.beginOfQuarter(cal.getTime());            CollectionUtil.getLast(result).end(new Date(dt.getTime() - 24L * 3600 * 1000).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());            if (cal.get(Calendar.MONTH) &gt;= 1 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 3) &#123;                CollectionUtil.getLast(result).setMonth(&quot;4&quot;);            &#125; else if (cal.get(Calendar.MONTH) &gt;= 4 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 6) &#123;                CollectionUtil.getLast(result).setMonth(&quot;1&quot;);            &#125; else if (cal.get(Calendar.MONTH) &gt;= 7 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 9) &#123;                CollectionUtil.getLast(result).setMonth(&quot;2&quot;);            &#125; else if (cal.get(Calendar.MONTH) &gt;= 10 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 12) &#123;                CollectionUtil.getLast(result).setMonth(&quot;3&quot;);            &#125;            result.add(Range.create(dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));            cal.add(Calendar.MONTH, 3);        &#125;        CollectionUtil.getLast(result).end(end.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());        if (cal.get(Calendar.MONTH) &gt;= 1 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 3) &#123;            CollectionUtil.getLast(result).setMonth(&quot;4&quot;);        &#125; else if (cal.get(Calendar.MONTH) &gt;= 4 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 6) &#123;            CollectionUtil.getLast(result).setMonth(&quot;1&quot;);        &#125; else if (cal.get(Calendar.MONTH) &gt;= 7 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 9) &#123;            CollectionUtil.getLast(result).setMonth(&quot;2&quot;);        &#125; else if (cal.get(Calendar.MONTH) &gt;= 10 &amp;&amp; cal.get(Calendar.MONTH) &lt;= 12) &#123;            CollectionUtil.getLast(result).setMonth(&quot;3&quot;);        &#125;        return result;    &#125;    //将时间段按照半年分割    public static List&lt;Range&gt; splitToHalfOfYears(Date start, Date end) &#123;        List&lt;Range&gt; result = new ArrayList&lt;&gt;();        result.add(Range.create(start.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));        Calendar cal = Calendar.getInstance();        cal.setTime(start);        cal.add(Calendar.MONTH, 6);        Calendar calOne = Calendar.getInstance();        calOne.setTime(end);        int mon = cal.get(Calendar.MONTH);        Calendar halfYearEnd = cn.hutool.core.date.DateUtil.endOfMonth(calOne);        while (cal.getTimeInMillis() &lt;= halfYearEnd.getTimeInMillis()) &#123;            mon = cal.get(Calendar.MONTH);            Calendar cal1 = Calendar.getInstance();            if (mon &lt; 6) &#123;                cal1.setTimeInMillis(cal.getTimeInMillis());                cal1.set(Calendar.MONTH, 0);            &#125; else &#123;                cal1.setTimeInMillis(cal.getTimeInMillis());                cal1.set(Calendar.MONTH, 6);            &#125;            Date dt = cn.hutool.core.date.DateUtil.beginOfMonth(cal1.getTime());            CollectionUtil.getLast(result).end(new Date(dt.getTime() - 24L * 3600 * 1000).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());            result.add(Range.create(dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));            cal.add(Calendar.MONTH, 6);        &#125;        CollectionUtil.getLast(result).end(end.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());        return result;    &#125;    //将时间段按照年分割    public static List&lt;Range&gt; splitToYears(Date start, Date end) &#123;        List&lt;Range&gt; result = new ArrayList&lt;&gt;();        result.add(Range.create(start.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));        Calendar cal = Calendar.getInstance();        cal.setTime(start);        cal.add(Calendar.YEAR, 1);        Date yearEnd = cn.hutool.core.date.DateUtil.endOfYear(end);        while (cal.getTimeInMillis() &lt;= yearEnd.getTime()) &#123;            Date dt = cn.hutool.core.date.DateUtil.beginOfYear(cal.getTime());            CollectionUtil.getLast(result).end(new Date(dt.getTime() - 24L * 3600 * 1000).toInstant().atZone(ZoneId.systemDefault()).toLocalDate());            result.add(Range.create(dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()));            cal.add(Calendar.YEAR, 1);        &#125;        CollectionUtil.getLast(result).end(end.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());        return result;    &#125;    //根据年，月，第几周获取时间范围    public static Map getWeekDateLimits(String year, String month, String week) &#123;        Map result = new HashMap();        SimpleDateFormat dft = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);        Calendar c1 = Calendar.getInstance();        c1.set(Calendar.YEAR, Integer.parseInt(year));        c1.set(Calendar.MONTH, Integer.parseInt(month) - 1);        c1.set(Calendar.DAY_OF_WEEK, 2);        c1.set(Calendar.WEEK_OF_MONTH, Integer.parseInt(week));        Date time1 = c1.getTime();        String begin = dft.format(time1);        c1.set(Calendar.DATE, c1.get(Calendar.DATE) + 6);        Date time2 = c1.getTime();        String end = dft.format(time2);        result.put(&quot;begin&quot;, begin);        result.put(&quot;end&quot;, end);        return result;    &#125;    public static void main(String[] args) &#123;        try &#123;            Calendar c = Calendar.getInstance();            c.set(Calendar.YEAR, 2021);            c.set(Calendar.MONTH, (5 - 1));            c.setFirstDayOfWeek(Calendar.MONDAY);            System.out.println( c.get(Calendar.YEAR) + &quot;年&quot; + (c.get(Calendar.MONTH) + 1) + &quot;月&quot;);            System.out.println(&quot;天数：&quot; + c.getActualMaximum(Calendar.DAY_OF_MONTH));            System.out.println(&quot;Actual周数：&quot; + c.getActualMaximum(Calendar.WEEK_OF_MONTH));            System.out.println(&quot;Max周数：&quot; + c.getMaximum(Calendar.WEEK_OF_MONTH));            for (int i = 0; i &lt; 6; i++) &#123;                System.out.println(getWeekDateLimits(2021 + &quot;&quot;, 5 + &quot;&quot;, (i + 1) + &quot;&quot;));            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
